local wk = require('which-key')

wk.setup({
    win = {
        border = "single",
    },
    layout = {
        align = "center",
    }
})

wk.add(
    {
        { "<leader>c",       group = "Code",                                                                                            remap = false },
        { "<leader>ca",      "<cmd>lua vim.lsp.buf.code_action()<CR>",                                                                  desc = "Code Actions",                remap = false },
        { "<leader>cc",      ":lua require('neoclip').clear_history()<CR>",                                                             desc = "Clean clipboard history",     remap = false },
        { "<leader>cm",      "<Plug>CommentaryLine<CR>",                                                                                desc = "Comment (line or selection)", remap = false },
        { "<leader>d",       group = "Database && Debug",                                                                               remap = false },
        { "<leader>db",      ":DBUIToggle<CR>",                                                                                         desc = "View databases",              remap = false },
        { "<leader>dc",      ':lua require("dap").continue()<CR>',                                                                      desc = "Continue/Start session",      remap = false },
        { "<leader>de",      ':lua require("dapui").eval()<CR>',                                                                        desc = "Evaluate expression",         remap = false },
        { "<leader>di",      ':lua require("dap").step_into()<CR>',                                                                     desc = "Step into",                   remap = false },
        { "<leader>do",      ':lua require("dap").step_over()<CR>',                                                                     desc = "Step over",                   remap = false },
        { "<leader>dp",      ':lua require("dap").toggle_breakpoint()<CR>',                                                             desc = "Toggle breakpoint",           remap = false },
        { "<leader>dr",      ':lua require("dap").run_to_cursor()<CR>',                                                                 desc = "Run to cursor",               remap = false },
        { "<leader>ds",      "<Plug>(DBUI_SaveQuery)",                                                                                  desc = "Save query to fil",           remap = false },
        { "<leader>dt",      ':lua require("dapui").toggle()<CR>',                                                                      desc = "Open dap-ui",                 remap = false },
        { "<leader>dx",      ':lua require("dap").close()<CR>',                                                                         desc = "close",                       remap = false },
        { "<leader>f",       group = "Files",                                                                                           remap = false },
        { "<leader>fb",      ":Telescope buffers<CR>",                                                                                  desc = "Opened Buffers",              remap = false },
        { "<leader>fc",      ":Telescope neoclip a extra=star,plus,unnamed,b<CR>",                                                      desc = "Clipboard",                   remap = false },
        { "<leader>ff",      ":lua require('telescope.builtin').find_files(require('telescope.themes').get_ivy({hidden = true}))<CR>",  desc = "Find Files",                  remap = false },
        { "<leader>fg",      ":lua require('telescope.builtin').live_grep(require('telescope.themes').get_ivy({hidden = true}))<CR>",   desc = "Grep",                        remap = false },
        { "<leader>fh",      ":lua require('telescope.builtin').resume(require('telescope.themes').get_ivy({hidden = true}))<CR>",      desc = "Last Search (includes git)",  remap = false },
        { "<leader>fm",      "<cmd>lua vim.lsp.buf.format()<CR>",                                                                       desc = "Format File",                 remap = false },
        { "<leader>fp",      ":lua require('telescope').extensions.project.project{}<CR>",                                              desc = "Find Projects",               remap = false },
        { "<leader>fs",      ":lua require('telescope.builtin').grep_string(require('telescope.themes').get_ivy({hidden = true}))<CR>", desc = "Grep String",                 remap = false },
        { "<leader>ft",      ":TodoTelescope<CR>",                                                                                      desc = "To dos",                      remap = false },
        { "<leader>g",       group = "Git",                                                                                             remap = false },
        { "<leader>gb",      ":lua require('telescope.builtin').git_branches()<CR>",                                                    desc = "Git Branches",                remap = false },
        { "<leader>gc",      ":lua require('telescope.builtin').git_commits()<CR>",                                                     desc = "Git Commits",                 remap = false },
        { "<leader>gd",      ":Gvdiffsplit<CR>",                                                                                        desc = "Git File Diff",               remap = false },
        { "<leader>gl",      ":LazyGit<CR>",                                                                                            desc = "Lazy Git",                    remap = false },
        { "<leader>gm",      ":Gvdiffsplit!<CR>",                                                                                       desc = "Merge conflicts",             remap = false },
        { "<leader>go",      ":GitBlameOpenCommitURL<CR>",                                                                              desc = "Open commit in browser",      remap = false },
        { "<leader>gp",      ":GHSearchPRs<CR>",                                                                                        desc = "Lazy Git",                    remap = false },
        { "<leader>gs",      ":lua require('telescope.builtin').git_stash()<CR>",                                                       desc = "Git Stashes",                 remap = false },
        { "<leader>i",       group = "ChatGPT",                                                                                         remap = false },
        { "<leader>ih",      ":GpChatToggle split<CR>",                                                                                 desc = "Toggle ChatGPT in vsplit",    remap = false },
        { "<leader>it",      ":GpChatToggle tabnew<CR>",                                                                                desc = "Toggle ChatGPT in a new tab", remap = false },
        { "<leader>iv",      ":GpChatToggle vsplit<CR>",                                                                                desc = "Toggle ChatGPT in vsplit",    remap = false },
        { "<leader>k",       group = "Keymaps",                                                                                         remap = false },
        { "<leader>km",      ":lua require('telescope.builtin').keymaps()<CR>",                                                         desc = "Keymaps",                     remap = false },
        { "<leader>l",       group = "Lsp",                                                                                             remap = false },
        { "<leader>lc",      "``",                                                                                                      desc = "Last change",                 remap = false },
        { "<leader>ld",      "<cmd>lua vim.lsp.buf.definition()<CR>",                                                                   desc = "Lsp: Go to definition",       remap = false },
        { "<leader>le",      "<cmd>lua vim.diagnostic.open_float()<CR>",                                                                desc = "Lsp: Open Error",             remap = false },
        { "<leader>lh",      "<cmd>lua vim.lsp.buf.hover()<CR>",                                                                        desc = "Lsp: Show information",       remap = false },
        { "<leader>li",      "<cmd>lua vim.lsp.buf.implementation()<CR>",                                                               desc = "Lsp: Go to implementatios",   remap = false },
        { "<leader>ln",      "<cmd>lua vim.diagnostic.goto_next()<CR>",                                                                 desc = "Lsp: Next Error",             remap = false },
        { "<leader>lp",      "<cmd>lua vim.diagnostic.goto_prev()<CR>",                                                                 desc = "Lsp: Previous Error",         remap = false },
        { "<leader>lr",      ":lua require('telescope.builtin').lsp_references()<CR>",                                                  desc = "Lsp: Go to references",       remap = false },
        { "<leader>r",       group = "Rename and resize",                                                                               remap = false },
        { "<leader>rh",      ":horizontal resize -10",                                                                                  desc = "Horizontal resize - 10",      remap = false },
        { "<leader>rj",      ":vertical resize -5",                                                                                     desc = "Vertical resize - 5",         remap = false },
        { "<leader>rk",      ":vertical resize +5",                                                                                     desc = "Vertical resize + 5",         remap = false },
        { "<leader>rl",      ":horizontal resize +10",                                                                                  desc = "Horizontal resize + 10",      remap = false },
        { "<leader>rn",      "<cmd>lua vim.lsp.buf.rename()<CR>",                                                                       desc = "Rename",                      remap = false },
        { "<leader>s",       group = "Splits",                                                                                          remap = false },
        { "<leader>sh",      ":split<CR>",                                                                                              desc = "Horizontal Split",            remap = false },
        { "<leader>sv",      ":vsplit<CR>",                                                                                             desc = "Vertical Split",              remap = false },
        { "<leader>t",       group = "Tree and Tags",                                                                                   remap = false },
        { "<leader>tr",      ":NvimTreeToggle<CR>",                                                                                     desc = "View file tree",              remap = false },
        { "<leader>tt",      ":TagbarToggle<CR>",                                                                                       desc = "View file tags",              remap = false },
        { "<C-h>",           ":bprev<CR>",                                                                                              desc = "Go to previous buffer" },
        { "<C-l>",           ":bnext<CR>",                                                                                              desc = "Go to next buffer" },
        { "<C-q>",           ":BD<CR>",                                                                                                 desc = "Close Buffer" },
        { "<C-s>",           ":w<CR>",                                                                                                  desc = "Save Buffer" },
        { "<C-y>",           ":redo<CR>",                                                                                               desc = "Redo" },
        { "<C-z>",           ":undo<CR>",                                                                                               desc = "Undo" },
        { "<leader><Down>",  "<C-W><Down>",                                                                                             desc = "Go To Bottom Split" },
        { "<leader><Left>",  "<C-W><Left>",                                                                                             desc = "Go To Left Split" },
        { "<leader><Right>", "<C-W><Right>",                                                                                            desc = "Go To Right Split" },
        { "<leader><Up>",    "<C-W><Up>",                                                                                               desc = "Go To Upper Split" },
        { "<leader>rq",      "<Plug>(DBUI_ExecuteQuery)",                                                                               desc = "Execute selected query" },
        { "<leader>em",      ":lua require('refactoring').select_refactor()<CR>",                                                       desc = "Refactor",                    mode = "v" },
        { "<leader>rq",      "<Plug>(DBUI_ExecuteQuery)",                                                                               desc = "Execute selected query",      mode = "v" },
        { "<leader>c",       group = "Comment",                                                                                         mode = "x",                           remap = false },
        { "<leader>cm",      "<Plug>Commentary<CR>",                                                                                    desc = "Comment (line or selection)", mode = "x",   remap = false },
        { "<leader>ns",      ":source $MYVIMRC<CR>",                                                                                    desc = "Source Vim config",           remap = false },
        { "<leader>o",       ":set ve=all<CR>",                                                                                         desc = "set ve=all",                  remap = false },
        { "<leader>v",       ":VBox<CR>",                                                                                               desc = "VBox draw",                   mode = "v" },
    }
)
